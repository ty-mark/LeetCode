/*
    Given an integer n, generate all structurally unique BST's (binary search trees) 
    that store values 1 ... n.

    Example:

    Input: 3
    Output:
    [
      [1,null,3,2],
      [3,2,null,1],
      [3,1,null,null,2],
      [2,1,3],
      [1,null,2,null,3]
    ]
    Explanation:
    The above output corresponds to the 5 unique BST's shown below:

       1         3     3      2      1
        \       /     /      / \      \
         3     2     1      1   3      2
        /     /       \                 \
       2     1         2                 3
*/

class Solution {
    public List<TreeNode> generateTrees(int n) {
        List<TreeNode>[] dp = new List[n + 1];
        dp[0] = new ArrayList<>();
        if (n == 0) return dp[0];
//         when the subtree is empty, add NULL value
        dp[0].add(null);
//         construct the dp array
        for (int i = 1; i <= n; i++) {
            dp[i] = new ArrayList<>();
//             i --> total number of nodes
//             j --> number of nodes in the left subtree
            for (int j = 0; j < i; j++) {
                for (TreeNode nodeL : dp[j]) {
                    for (TreeNode nodeR : dp[i - j - 1]) {
//                         current root: j+1
                        TreeNode root = new TreeNode(j + 1);
//                         left subtree has been stored in the dp array
                        root.left = nodeL;
//                         right subtree can be generated by shifting the existing results 
//                         (with same number of nodes) to the right by a distance of (j+1)
                        root.right = clone(nodeR, j + 1);
                        dp[i].add(root);
                    }
                }
            }
        }
        return dp[n];
    }
    private TreeNode clone(TreeNode root, int offset) {
        if (root == null) return null;
        TreeNode newRoot = new TreeNode(root.val + offset);
        newRoot.left = clone(root.left, offset);
        newRoot.right = clone(root.right, offset);
        return newRoot;
    }
}